// Code generated by mockery v2.23.4. DO NOT EDIT.

package carts

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/tuanhuu162/go23_course/ex6/models"
)

// MockCartRepositoryInterface is an autogenerated mock type for the CartRepositoryInterface type
type MockCartRepositoryInterface struct {
	mock.Mock
}

type MockCartRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCartRepositoryInterface) EXPECT() *MockCartRepositoryInterface_Expecter {
	return &MockCartRepositoryInterface_Expecter{mock: &_m.Mock}
}

// AddProductToCart provides a mock function with given fields: payload, cart
func (_m *MockCartRepositoryInterface) AddProductToCart(payload models.CartRequestPayload, cart *models.Cart) error {
	ret := _m.Called(payload, cart)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.CartRequestPayload, *models.Cart) error); ok {
		r0 = rf(payload, cart)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCartRepositoryInterface_AddProductToCart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProductToCart'
type MockCartRepositoryInterface_AddProductToCart_Call struct {
	*mock.Call
}

// AddProductToCart is a helper method to define mock.On call
//   - payload models.CartRequestPayload
//   - cart *models.Cart
func (_e *MockCartRepositoryInterface_Expecter) AddProductToCart(payload interface{}, cart interface{}) *MockCartRepositoryInterface_AddProductToCart_Call {
	return &MockCartRepositoryInterface_AddProductToCart_Call{Call: _e.mock.On("AddProductToCart", payload, cart)}
}

func (_c *MockCartRepositoryInterface_AddProductToCart_Call) Run(run func(payload models.CartRequestPayload, cart *models.Cart)) *MockCartRepositoryInterface_AddProductToCart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.CartRequestPayload), args[1].(*models.Cart))
	})
	return _c
}

func (_c *MockCartRepositoryInterface_AddProductToCart_Call) Return(_a0 error) *MockCartRepositoryInterface_AddProductToCart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCartRepositoryInterface_AddProductToCart_Call) RunAndReturn(run func(models.CartRequestPayload, *models.Cart) error) *MockCartRepositoryInterface_AddProductToCart_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProductFromCart provides a mock function with given fields: payload, cart
func (_m *MockCartRepositoryInterface) DeleteProductFromCart(payload models.CartRequestPayload, cart *models.Cart) error {
	ret := _m.Called(payload, cart)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.CartRequestPayload, *models.Cart) error); ok {
		r0 = rf(payload, cart)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCartRepositoryInterface_DeleteProductFromCart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProductFromCart'
type MockCartRepositoryInterface_DeleteProductFromCart_Call struct {
	*mock.Call
}

// DeleteProductFromCart is a helper method to define mock.On call
//   - payload models.CartRequestPayload
//   - cart *models.Cart
func (_e *MockCartRepositoryInterface_Expecter) DeleteProductFromCart(payload interface{}, cart interface{}) *MockCartRepositoryInterface_DeleteProductFromCart_Call {
	return &MockCartRepositoryInterface_DeleteProductFromCart_Call{Call: _e.mock.On("DeleteProductFromCart", payload, cart)}
}

func (_c *MockCartRepositoryInterface_DeleteProductFromCart_Call) Run(run func(payload models.CartRequestPayload, cart *models.Cart)) *MockCartRepositoryInterface_DeleteProductFromCart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.CartRequestPayload), args[1].(*models.Cart))
	})
	return _c
}

func (_c *MockCartRepositoryInterface_DeleteProductFromCart_Call) Return(_a0 error) *MockCartRepositoryInterface_DeleteProductFromCart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCartRepositoryInterface_DeleteProductFromCart_Call) RunAndReturn(run func(models.CartRequestPayload, *models.Cart) error) *MockCartRepositoryInterface_DeleteProductFromCart_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCartRepositoryInterface creates a new instance of MockCartRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCartRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCartRepositoryInterface {
	mock := &MockCartRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
